/*
 * This file is generated by jOOQ.
 */
package pay.token.jooq.schema.public_.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pay.token.jooq.schema.public_.Keys;
import pay.token.jooq.schema.public_.Public;
import pay.token.jooq.schema.public_.tables.records.CardRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Card extends TableImpl<CardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.CARD</code>
     */
    public static final Card CARD = new Card();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardRecord> getRecordType() {
        return CardRecord.class;
    }

    /**
     * The column <code>PUBLIC.CARD.CARD_REF_ID</code>.
     */
    public final TableField<CardRecord, Long> CARD_REF_ID = createField(DSL.name("CARD_REF_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.CARD.PAYER_CI</code>.
     */
    public final TableField<CardRecord, String> PAYER_CI = createField(DSL.name("PAYER_CI"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARD.PAYER_NAME</code>.
     */
    public final TableField<CardRecord, String> PAYER_NAME = createField(DSL.name("PAYER_NAME"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARD.CARD_CODE</code>.
     */
    public final TableField<CardRecord, String> CARD_CODE = createField(DSL.name("CARD_CODE"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARD.CARD_NUMBER</code>.
     */
    public final TableField<CardRecord, String> CARD_NUMBER = createField(DSL.name("CARD_NUMBER"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARD.CARD_VALID_YEAR</code>.
     */
    public final TableField<CardRecord, String> CARD_VALID_YEAR = createField(DSL.name("CARD_VALID_YEAR"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARD.CARD_VALID_MONTH</code>.
     */
    public final TableField<CardRecord, String> CARD_VALID_MONTH = createField(DSL.name("CARD_VALID_MONTH"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARD.CARD_CVS</code>.
     */
    public final TableField<CardRecord, String> CARD_CVS = createField(DSL.name("CARD_CVS"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.CARD.CREATED_TIME</code>.
     */
    public final TableField<CardRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("CREATED_TIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private Card(Name alias, Table<CardRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Card(Name alias, Table<CardRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.CARD</code> table reference
     */
    public Card(String alias) {
        this(DSL.name(alias), CARD);
    }

    /**
     * Create an aliased <code>PUBLIC.CARD</code> table reference
     */
    public Card(Name alias) {
        this(alias, CARD);
    }

    /**
     * Create a <code>PUBLIC.CARD</code> table reference
     */
    public Card() {
        this(DSL.name("CARD"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CardRecord, Long> getIdentity() {
        return (Identity<CardRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CardRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_1;
    }

    @Override
    public Card as(String alias) {
        return new Card(DSL.name(alias), this);
    }

    @Override
    public Card as(Name alias) {
        return new Card(alias, this);
    }

    @Override
    public Card as(Table<?> alias) {
        return new Card(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Card rename(String name) {
        return new Card(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Card rename(Name name) {
        return new Card(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Card rename(Table<?> name) {
        return new Card(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Card where(Condition condition) {
        return new Card(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Card where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Card where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Card where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Card where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Card where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Card where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Card where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Card whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Card whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
