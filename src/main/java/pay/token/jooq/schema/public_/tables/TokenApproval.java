/*
 * This file is generated by jOOQ.
 */
package pay.token.jooq.schema.public_.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pay.token.jooq.schema.public_.Keys;
import pay.token.jooq.schema.public_.Public;
import pay.token.jooq.schema.public_.tables.records.TokenApprovalRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokenApproval extends TableImpl<TokenApprovalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.TOKEN_APPROVAL</code>
     */
    public static final TokenApproval TOKEN_APPROVAL = new TokenApproval();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenApprovalRecord> getRecordType() {
        return TokenApprovalRecord.class;
    }

    /**
     * The column <code>PUBLIC.TOKEN_APPROVAL.TOKEN_APPROVAL_ID</code>.
     */
    public final TableField<TokenApprovalRecord, Long> TOKEN_APPROVAL_ID = createField(DSL.name("TOKEN_APPROVAL_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.TOKEN_APPROVAL.TOKEN_ID</code>.
     */
    public final TableField<TokenApprovalRecord, Long> TOKEN_ID = createField(DSL.name("TOKEN_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TOKEN_APPROVAL.CREATED_TIME</code>.
     */
    public final TableField<TokenApprovalRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("CREATED_TIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private TokenApproval(Name alias, Table<TokenApprovalRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TokenApproval(Name alias, Table<TokenApprovalRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.TOKEN_APPROVAL</code> table reference
     */
    public TokenApproval(String alias) {
        this(DSL.name(alias), TOKEN_APPROVAL);
    }

    /**
     * Create an aliased <code>PUBLIC.TOKEN_APPROVAL</code> table reference
     */
    public TokenApproval(Name alias) {
        this(alias, TOKEN_APPROVAL);
    }

    /**
     * Create a <code>PUBLIC.TOKEN_APPROVAL</code> table reference
     */
    public TokenApproval() {
        this(DSL.name("TOKEN_APPROVAL"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TokenApprovalRecord, Long> getIdentity() {
        return (Identity<TokenApprovalRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TokenApprovalRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public TokenApproval as(String alias) {
        return new TokenApproval(DSL.name(alias), this);
    }

    @Override
    public TokenApproval as(Name alias) {
        return new TokenApproval(alias, this);
    }

    @Override
    public TokenApproval as(Table<?> alias) {
        return new TokenApproval(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenApproval rename(String name) {
        return new TokenApproval(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenApproval rename(Name name) {
        return new TokenApproval(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenApproval rename(Table<?> name) {
        return new TokenApproval(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TokenApproval where(Condition condition) {
        return new TokenApproval(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TokenApproval where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TokenApproval where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TokenApproval where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TokenApproval where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TokenApproval where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TokenApproval where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TokenApproval where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TokenApproval whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TokenApproval whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
