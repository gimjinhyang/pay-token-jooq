/*
 * This file is generated by jOOQ.
 */
package pay.token.jooq.schema.public_.tables;


import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import pay.token.jooq.schema.public_.Keys;
import pay.token.jooq.schema.public_.Public;
import pay.token.jooq.schema.public_.tables.records.TokenStatusRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokenStatus extends TableImpl<TokenStatusRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PUBLIC.TOKEN_STATUS</code>
     */
    public static final TokenStatus TOKEN_STATUS = new TokenStatus();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenStatusRecord> getRecordType() {
        return TokenStatusRecord.class;
    }

    /**
     * The column <code>PUBLIC.TOKEN_STATUS.TOKEN_HISTORY_ID</code>.
     */
    public final TableField<TokenStatusRecord, Long> TOKEN_HISTORY_ID = createField(DSL.name("TOKEN_HISTORY_ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.TOKEN_STATUS.TOKEN_ID</code>.
     */
    public final TableField<TokenStatusRecord, Long> TOKEN_ID = createField(DSL.name("TOKEN_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TOKEN_STATUS.TOKEN_STATUS_CODE</code>.
     */
    public final TableField<TokenStatusRecord, String> TOKEN_STATUS_CODE = createField(DSL.name("TOKEN_STATUS_CODE"), SQLDataType.VARCHAR(16).nullable(false), this, "");

    /**
     * The column <code>PUBLIC.TOKEN_STATUS.CREATED_TIME</code>.
     */
    public final TableField<TokenStatusRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("CREATED_TIME"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private TokenStatus(Name alias, Table<TokenStatusRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private TokenStatus(Name alias, Table<TokenStatusRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>PUBLIC.TOKEN_STATUS</code> table reference
     */
    public TokenStatus(String alias) {
        this(DSL.name(alias), TOKEN_STATUS);
    }

    /**
     * Create an aliased <code>PUBLIC.TOKEN_STATUS</code> table reference
     */
    public TokenStatus(Name alias) {
        this(alias, TOKEN_STATUS);
    }

    /**
     * Create a <code>PUBLIC.TOKEN_STATUS</code> table reference
     */
    public TokenStatus() {
        this(DSL.name("TOKEN_STATUS"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<TokenStatusRecord, Long> getIdentity() {
        return (Identity<TokenStatusRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TokenStatusRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_D;
    }

    @Override
    public TokenStatus as(String alias) {
        return new TokenStatus(DSL.name(alias), this);
    }

    @Override
    public TokenStatus as(Name alias) {
        return new TokenStatus(alias, this);
    }

    @Override
    public TokenStatus as(Table<?> alias) {
        return new TokenStatus(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenStatus rename(String name) {
        return new TokenStatus(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenStatus rename(Name name) {
        return new TokenStatus(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TokenStatus rename(Table<?> name) {
        return new TokenStatus(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TokenStatus where(Condition condition) {
        return new TokenStatus(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TokenStatus where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TokenStatus where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TokenStatus where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TokenStatus where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TokenStatus where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TokenStatus where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public TokenStatus where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TokenStatus whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public TokenStatus whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
