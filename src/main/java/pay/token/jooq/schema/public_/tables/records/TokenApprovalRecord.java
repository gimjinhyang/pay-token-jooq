/*
 * This file is generated by jOOQ.
 */
package pay.token.jooq.schema.public_.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import pay.token.jooq.schema.public_.tables.TokenApproval;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokenApprovalRecord extends UpdatableRecordImpl<TokenApprovalRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>PUBLIC.TOKEN_APPROVAL.TOKEN_APPROVAL_ID</code>.
     */
    public void setTokenApprovalId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.TOKEN_APPROVAL.TOKEN_APPROVAL_ID</code>.
     */
    public Long getTokenApprovalId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>PUBLIC.TOKEN_APPROVAL.TOKEN_ID</code>.
     */
    public void setTokenId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.TOKEN_APPROVAL.TOKEN_ID</code>.
     */
    public Long getTokenId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>PUBLIC.TOKEN_APPROVAL.CREATED_TIME</code>.
     */
    public void setCreatedTime(LocalDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.TOKEN_APPROVAL.CREATED_TIME</code>.
     */
    public LocalDateTime getCreatedTime() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TokenApprovalRecord
     */
    public TokenApprovalRecord() {
        super(TokenApproval.TOKEN_APPROVAL);
    }

    /**
     * Create a detached, initialised TokenApprovalRecord
     */
    public TokenApprovalRecord(Long tokenApprovalId, Long tokenId, LocalDateTime createdTime) {
        super(TokenApproval.TOKEN_APPROVAL);

        setTokenApprovalId(tokenApprovalId);
        setTokenId(tokenId);
        setCreatedTime(createdTime);
        resetChangedOnNotNull();
    }
}
