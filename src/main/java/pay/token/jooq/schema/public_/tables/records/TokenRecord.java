/*
 * This file is generated by jOOQ.
 */
package pay.token.jooq.schema.public_.tables.records;


import java.time.LocalDateTime;
import java.time.LocalTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;

import pay.token.jooq.schema.public_.tables.Token;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TokenRecord extends UpdatableRecordImpl<TokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>PUBLIC.TOKEN.TOKEN_ID</code>.
     */
    public void setTokenId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.TOKEN.TOKEN_ID</code>.
     */
    public Long getTokenId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>PUBLIC.TOKEN.CARD_REF_ID</code>.
     */
    public void setCardRefId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.TOKEN.CARD_REF_ID</code>.
     */
    public Long getCardRefId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>PUBLIC.TOKEN.TOKEN_TEXT</code>.
     */
    public void setTokenText(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.TOKEN.TOKEN_TEXT</code>.
     */
    public String getTokenText() {
        return (String) get(2);
    }

    /**
     * Setter for <code>PUBLIC.TOKEN.TOKEN_EXPIRE</code>.
     */
    public void setTokenExpire(LocalTime value) {
        set(3, value);
    }

    /**
     * Getter for <code>PUBLIC.TOKEN.TOKEN_EXPIRE</code>.
     */
    public LocalTime getTokenExpire() {
        return (LocalTime) get(3);
    }

    /**
     * Setter for <code>PUBLIC.TOKEN.CREATED_TIME</code>.
     */
    public void setCreatedTime(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>PUBLIC.TOKEN.CREATED_TIME</code>.
     */
    public LocalDateTime getCreatedTime() {
        return (LocalDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TokenRecord
     */
    public TokenRecord() {
        super(Token.TOKEN);
    }

    /**
     * Create a detached, initialised TokenRecord
     */
    public TokenRecord(Long tokenId, Long cardRefId, String tokenText, LocalTime tokenExpire, LocalDateTime createdTime) {
        super(Token.TOKEN);

        setTokenId(tokenId);
        setCardRefId(cardRefId);
        setTokenText(tokenText);
        setTokenExpire(tokenExpire);
        setCreatedTime(createdTime);
        resetChangedOnNotNull();
    }
}
